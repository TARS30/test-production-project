/*! For license information please see 9314.9ca75697.iframe.bundle.js.LICENSE.txt */

(self.webpackChunkproduction_project_code_course = self.webpackChunkproduction_project_code_course || []).push([[9314], {
  './src/pages/NotFoundPage/ui/NotFound.tsx': (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    __webpack_require__.d(__webpack_exports__, { E: () => NotFound }); const useTranslation = __webpack_require__('./node_modules/react-i18next/dist/es/useTranslation.js'); const classNames = __webpack_require__('./src/shared/lib/classNames/classNames.ts'); const injectStylesIntoStyleTag = __webpack_require__('./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js'); const injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag); const styleDomAPI = __webpack_require__('./node_modules/style-loader/dist/runtime/styleDomAPI.js'); const styleDomAPI_default = __webpack_require__.n(styleDomAPI); const insertBySelector = __webpack_require__('./node_modules/style-loader/dist/runtime/insertBySelector.js'); const insertBySelector_default = __webpack_require__.n(insertBySelector); const setAttributesWithoutAttributes = __webpack_require__('./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js'); const setAttributesWithoutAttributes_default = __webpack_require__.n(setAttributesWithoutAttributes); const insertStyleElement = __webpack_require__('./node_modules/style-loader/dist/runtime/insertStyleElement.js'); const insertStyleElement_default = __webpack_require__.n(insertStyleElement); const styleTagTransform = __webpack_require__('./node_modules/style-loader/dist/runtime/styleTagTransform.js'); const styleTagTransform_default = __webpack_require__.n(styleTagTransform); const NotFound_module = __webpack_require__('./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[13].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/pages/NotFoundPage/ui/NotFound.module.scss'); const options = {}; options.styleTagTransform = styleTagTransform_default(), options.setAttributes = setAttributesWithoutAttributes_default(), options.insert = insertBySelector_default().bind(null, 'head'), options.domAPI = styleDomAPI_default(), options.insertStyleElement = insertStyleElement_default(); injectStylesIntoStyleTag_default()(NotFound_module.c, options); const ui_NotFound_module = NotFound_module.c && NotFound_module.c.locals ? NotFound_module.c.locals : void 0; const jsx_runtime = __webpack_require__('./node_modules/react/jsx-runtime.js'); var NotFound = function NotFound(_ref) {
      const { className } = _ref; const
        { t } = (0, useTranslation.G)(); return (0, jsx_runtime.jsx)('div', { className: (0, classNames.g)(ui_NotFound_module.NotFound, {}, [className]), children: t('page-not-found') });
    };
  },
  './src/shared/config/routeConfig/routeConfig.tsx': (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    __webpack_require__.d(__webpack_exports__, { oF: () => RoutePath }); const react = __webpack_require__('./node_modules/react/index.js'); function _typeof(o) { return _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, _typeof(o); } function _regeneratorRuntime() {
      _regeneratorRuntime = function _regeneratorRuntime() { return e; }; let t; var e = {}; const r = Object.prototype; const n = r.hasOwnProperty; const o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }; const i = typeof Symbol === 'function' ? Symbol : {}; const a = i.iterator || '@@iterator'; const c = i.asyncIterator || '@@asyncIterator'; const u = i.toStringTag || '@@toStringTag'; function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r, enumerable: !0, configurable: !0, writable: !0,
        }), t[e];
      } try { define({}, ''); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { const i = e && e.prototype instanceof Generator ? e : Generator; const a = Object.create(i.prototype); const c = new Context(n || []); return o(a, '_invoke', { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: 'normal', arg: t.call(e, r) }; } catch (t) { return { type: 'throw', arg: t }; } }e.wrap = wrap; const h = 'suspendedStart'; const l = 'suspendedYield'; const f = 'executing'; const s = 'completed'; const y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} let p = {}; define(p, a, (function () { return this; })); const d = Object.getPrototypeOf; const v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); const g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ['next', 'throw', 'return'].forEach(((e) => { define(t, e, (function (t) { return this._invoke(e, t); })); })); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { const c = tryCatch(t[r], t, o); if (c.type !== 'throw') { const u = c.arg; const h = u.value; return h && _typeof(h) == 'object' && n.call(h, '__await') ? e.resolve(h.__await).then(((t) => { invoke('next', t, i, a); }), ((t) => { invoke('throw', t, i, a); })) : e.resolve(h).then(((t) => { u.value = t, i(u); }), ((t) => { return invoke('throw', t, i, a); })); }a(c.arg); } let r; o(this, '_invoke', { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(((e, r) => { invoke(t, n, e, r); })); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { let o = h; return function (i, a) { if (o === f) throw new Error('Generator is already running'); if (o === s) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = f; const p = tryCatch(e, r, n); if (p.type === 'normal') { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; }p.type === 'throw' && (o = s, n.method = 'throw', n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { const n = r.method; const o = e.iterator[n]; if (o === t) return r.delegate = null, n === 'throw' && e.iterator.return && (r.method = 'return', r.arg = t, maybeInvokeDelegate(e, r), r.method === 'throw') || n !== 'return' && (r.method = 'throw', r.arg = new TypeError(`The iterator does not provide a '${n}' method`)), y; const i = tryCatch(o, e.iterator, r.arg); if (i.type === 'throw') return r.method = 'throw', r.arg = i.arg, r.delegate = null, y; const a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, r.method !== 'return' && (r.method = 'next', r.arg = t), r.delegate = null, y) : a : (r.method = 'throw', r.arg = new TypeError('iterator result is not an object'), r.delegate = null, y); } function pushTryEntry(t) { const e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { const e = t.completion || {}; e.type = 'normal', delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || e === '') { const r = e[a]; if (r) return r.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let o = -1; const i = function next() { for (;++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(`${_typeof(e)} is not iterable`); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, 'constructor', { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, 'GeneratorFunction'), e.isGeneratorFunction = function (t) { const e = typeof t === 'function' && t.constructor; return !!e && (e === GeneratorFunction || (e.displayName || e.name) === 'GeneratorFunction'); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, 'GeneratorFunction')), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, (function () { return this; })), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); const a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(((t) => { return t.done ? t.value : a.next(); })); }, defineIteratorMethods(g), define(g, u, 'Generator'), define(g, a, (function () { return this; })), define(g, 'toString', (() => { return '[object Generator]'; })), e.keys = function (t) { const e = Object(t); const r = []; for (const n in e)r.push(n); return r.reverse(), function next() { for (;r.length;) { const t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = {
        constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (const r in this)r.charAt(0) === 't' && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; const r = this; function handle(n, o) { return a.type = 'throw', a.arg = e, r.next = n, o && (r.method = 'next', r.arg = t), !!o; } for (let o = this.tryEntries.length - 1; o >= 0; --o) { const i = this.tryEntries[o]; var a = i.completion; if (i.tryLoc === 'root') return handle('end'); if (i.tryLoc <= this.prev) { const c = n.call(i, 'catchLoc'); const u = n.call(i, 'finallyLoc'); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= e && e <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = 'next', this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && e && (this.next = e), y; }, finish: function finish(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.tryLoc === t) { const n = r.completion; if (n.type === 'throw') { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error('illegal catch attempt'); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, this.method === 'next' && (this.arg = t), y; },
      }, e;
    } function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var { value } = info; } catch (error) { return void reject(error); }info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw); } function _asyncToGenerator(fn) { return function () { const self = this; const args = arguments; return new Promise(((resolve, reject) => { const gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err); }_next(void 0); })); }; } const MainPageLazy = (0, react.lazy)(_asyncToGenerator(_regeneratorRuntime().mark((function _callee() { return _regeneratorRuntime().wrap(((_context) => { for (;;) switch (_context.prev = _context.next) { case 0: return _context.abrupt('return', Promise.all([__webpack_require__.e(8448), __webpack_require__.e(7212)]).then(__webpack_require__.bind(__webpack_require__, './src/pages/MainPage/ui/MainPage.tsx'))); case 1: case 'end': return _context.stop(); } }), _callee); })))); function AboutPage_lazy_typeof(o) { return AboutPage_lazy_typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, AboutPage_lazy_typeof(o); } function AboutPage_lazy_regeneratorRuntime() {
      AboutPage_lazy_regeneratorRuntime = function _regeneratorRuntime() { return e; }; let t; var e = {}; const r = Object.prototype; const n = r.hasOwnProperty; const o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }; const i = typeof Symbol === 'function' ? Symbol : {}; const a = i.iterator || '@@iterator'; const c = i.asyncIterator || '@@asyncIterator'; const u = i.toStringTag || '@@toStringTag'; function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r, enumerable: !0, configurable: !0, writable: !0,
        }), t[e];
      } try { define({}, ''); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { const i = e && e.prototype instanceof Generator ? e : Generator; const a = Object.create(i.prototype); const c = new Context(n || []); return o(a, '_invoke', { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: 'normal', arg: t.call(e, r) }; } catch (t) { return { type: 'throw', arg: t }; } }e.wrap = wrap; const h = 'suspendedStart'; const l = 'suspendedYield'; const f = 'executing'; const s = 'completed'; const y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} let p = {}; define(p, a, (function () { return this; })); const d = Object.getPrototypeOf; const v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); const g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ['next', 'throw', 'return'].forEach(((e) => { define(t, e, (function (t) { return this._invoke(e, t); })); })); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { const c = tryCatch(t[r], t, o); if (c.type !== 'throw') { const u = c.arg; const h = u.value; return h && AboutPage_lazy_typeof(h) == 'object' && n.call(h, '__await') ? e.resolve(h.__await).then(((t) => { invoke('next', t, i, a); }), ((t) => { invoke('throw', t, i, a); })) : e.resolve(h).then(((t) => { u.value = t, i(u); }), ((t) => { return invoke('throw', t, i, a); })); }a(c.arg); } let r; o(this, '_invoke', { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(((e, r) => { invoke(t, n, e, r); })); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { let o = h; return function (i, a) { if (o === f) throw new Error('Generator is already running'); if (o === s) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = f; const p = tryCatch(e, r, n); if (p.type === 'normal') { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; }p.type === 'throw' && (o = s, n.method = 'throw', n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { const n = r.method; const o = e.iterator[n]; if (o === t) return r.delegate = null, n === 'throw' && e.iterator.return && (r.method = 'return', r.arg = t, maybeInvokeDelegate(e, r), r.method === 'throw') || n !== 'return' && (r.method = 'throw', r.arg = new TypeError(`The iterator does not provide a '${n}' method`)), y; const i = tryCatch(o, e.iterator, r.arg); if (i.type === 'throw') return r.method = 'throw', r.arg = i.arg, r.delegate = null, y; const a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, r.method !== 'return' && (r.method = 'next', r.arg = t), r.delegate = null, y) : a : (r.method = 'throw', r.arg = new TypeError('iterator result is not an object'), r.delegate = null, y); } function pushTryEntry(t) { const e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { const e = t.completion || {}; e.type = 'normal', delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || e === '') { const r = e[a]; if (r) return r.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let o = -1; const i = function next() { for (;++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(`${AboutPage_lazy_typeof(e)} is not iterable`); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, 'constructor', { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, 'GeneratorFunction'), e.isGeneratorFunction = function (t) { const e = typeof t === 'function' && t.constructor; return !!e && (e === GeneratorFunction || (e.displayName || e.name) === 'GeneratorFunction'); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, 'GeneratorFunction')), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, (function () { return this; })), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); const a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(((t) => { return t.done ? t.value : a.next(); })); }, defineIteratorMethods(g), define(g, u, 'Generator'), define(g, a, (function () { return this; })), define(g, 'toString', (() => { return '[object Generator]'; })), e.keys = function (t) { const e = Object(t); const r = []; for (const n in e)r.push(n); return r.reverse(), function next() { for (;r.length;) { const t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = {
        constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (const r in this)r.charAt(0) === 't' && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; const r = this; function handle(n, o) { return a.type = 'throw', a.arg = e, r.next = n, o && (r.method = 'next', r.arg = t), !!o; } for (let o = this.tryEntries.length - 1; o >= 0; --o) { const i = this.tryEntries[o]; var a = i.completion; if (i.tryLoc === 'root') return handle('end'); if (i.tryLoc <= this.prev) { const c = n.call(i, 'catchLoc'); const u = n.call(i, 'finallyLoc'); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= e && e <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = 'next', this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && e && (this.next = e), y; }, finish: function finish(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.tryLoc === t) { const n = r.completion; if (n.type === 'throw') { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error('illegal catch attempt'); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, this.method === 'next' && (this.arg = t), y; },
      }, e;
    } function AboutPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var { value } = info; } catch (error) { return void reject(error); }info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw); } function AboutPage_lazy_asyncToGenerator(fn) { return function () { const self = this; const args = arguments; return new Promise(((resolve, reject) => { const gen = fn.apply(self, args); function _next(value) { AboutPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value); } function _throw(err) { AboutPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err); }_next(void 0); })); }; } const AboutPageLazy = (0, react.lazy)(AboutPage_lazy_asyncToGenerator(AboutPage_lazy_regeneratorRuntime().mark((function _callee() { return AboutPage_lazy_regeneratorRuntime().wrap(((_context) => { for (;;) switch (_context.prev = _context.next) { case 0: return _context.abrupt('return', Promise.all([__webpack_require__.e(8448), __webpack_require__.e(1388)]).then(__webpack_require__.bind(__webpack_require__, './src/pages/AboutPage/ui/AboutPage.tsx'))); case 1: case 'end': return _context.stop(); } }), _callee); })))); const NotFound = __webpack_require__('./src/pages/NotFoundPage/ui/NotFound.tsx'); function ProfilePage_lazy_typeof(o) { return ProfilePage_lazy_typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, ProfilePage_lazy_typeof(o); } function ProfilePage_lazy_regeneratorRuntime() {
      ProfilePage_lazy_regeneratorRuntime = function _regeneratorRuntime() { return e; }; let t; var e = {}; const r = Object.prototype; const n = r.hasOwnProperty; const o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }; const i = typeof Symbol === 'function' ? Symbol : {}; const a = i.iterator || '@@iterator'; const c = i.asyncIterator || '@@asyncIterator'; const u = i.toStringTag || '@@toStringTag'; function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r, enumerable: !0, configurable: !0, writable: !0,
        }), t[e];
      } try { define({}, ''); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { const i = e && e.prototype instanceof Generator ? e : Generator; const a = Object.create(i.prototype); const c = new Context(n || []); return o(a, '_invoke', { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: 'normal', arg: t.call(e, r) }; } catch (t) { return { type: 'throw', arg: t }; } }e.wrap = wrap; const h = 'suspendedStart'; const l = 'suspendedYield'; const f = 'executing'; const s = 'completed'; const y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} let p = {}; define(p, a, (function () { return this; })); const d = Object.getPrototypeOf; const v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); const g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ['next', 'throw', 'return'].forEach(((e) => { define(t, e, (function (t) { return this._invoke(e, t); })); })); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { const c = tryCatch(t[r], t, o); if (c.type !== 'throw') { const u = c.arg; const h = u.value; return h && ProfilePage_lazy_typeof(h) == 'object' && n.call(h, '__await') ? e.resolve(h.__await).then(((t) => { invoke('next', t, i, a); }), ((t) => { invoke('throw', t, i, a); })) : e.resolve(h).then(((t) => { u.value = t, i(u); }), ((t) => { return invoke('throw', t, i, a); })); }a(c.arg); } let r; o(this, '_invoke', { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(((e, r) => { invoke(t, n, e, r); })); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { let o = h; return function (i, a) { if (o === f) throw new Error('Generator is already running'); if (o === s) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = f; const p = tryCatch(e, r, n); if (p.type === 'normal') { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; }p.type === 'throw' && (o = s, n.method = 'throw', n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { const n = r.method; const o = e.iterator[n]; if (o === t) return r.delegate = null, n === 'throw' && e.iterator.return && (r.method = 'return', r.arg = t, maybeInvokeDelegate(e, r), r.method === 'throw') || n !== 'return' && (r.method = 'throw', r.arg = new TypeError(`The iterator does not provide a '${n}' method`)), y; const i = tryCatch(o, e.iterator, r.arg); if (i.type === 'throw') return r.method = 'throw', r.arg = i.arg, r.delegate = null, y; const a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, r.method !== 'return' && (r.method = 'next', r.arg = t), r.delegate = null, y) : a : (r.method = 'throw', r.arg = new TypeError('iterator result is not an object'), r.delegate = null, y); } function pushTryEntry(t) { const e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { const e = t.completion || {}; e.type = 'normal', delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || e === '') { const r = e[a]; if (r) return r.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let o = -1; const i = function next() { for (;++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(`${ProfilePage_lazy_typeof(e)} is not iterable`); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, 'constructor', { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, 'GeneratorFunction'), e.isGeneratorFunction = function (t) { const e = typeof t === 'function' && t.constructor; return !!e && (e === GeneratorFunction || (e.displayName || e.name) === 'GeneratorFunction'); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, 'GeneratorFunction')), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, (function () { return this; })), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); const a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(((t) => { return t.done ? t.value : a.next(); })); }, defineIteratorMethods(g), define(g, u, 'Generator'), define(g, a, (function () { return this; })), define(g, 'toString', (() => { return '[object Generator]'; })), e.keys = function (t) { const e = Object(t); const r = []; for (const n in e)r.push(n); return r.reverse(), function next() { for (;r.length;) { const t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = {
        constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (const r in this)r.charAt(0) === 't' && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; const r = this; function handle(n, o) { return a.type = 'throw', a.arg = e, r.next = n, o && (r.method = 'next', r.arg = t), !!o; } for (let o = this.tryEntries.length - 1; o >= 0; --o) { const i = this.tryEntries[o]; var a = i.completion; if (i.tryLoc === 'root') return handle('end'); if (i.tryLoc <= this.prev) { const c = n.call(i, 'catchLoc'); const u = n.call(i, 'finallyLoc'); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= e && e <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = 'next', this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && e && (this.next = e), y; }, finish: function finish(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.tryLoc === t) { const n = r.completion; if (n.type === 'throw') { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error('illegal catch attempt'); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, this.method === 'next' && (this.arg = t), y; },
      }, e;
    } function ProfilePage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var { value } = info; } catch (error) { return void reject(error); }info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw); } function ProfilePage_lazy_asyncToGenerator(fn) { return function () { const self = this; const args = arguments; return new Promise(((resolve, reject) => { const gen = fn.apply(self, args); function _next(value) { ProfilePage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value); } function _throw(err) { ProfilePage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err); }_next(void 0); })); }; } const ProfilePageLazy = (0, react.lazy)(ProfilePage_lazy_asyncToGenerator(ProfilePage_lazy_regeneratorRuntime().mark((function _callee() { return ProfilePage_lazy_regeneratorRuntime().wrap(((_context) => { for (;;) switch (_context.prev = _context.next) { case 0: return _context.abrupt('return', Promise.all([__webpack_require__.e(8448), __webpack_require__.e(8092), __webpack_require__.e(3692), __webpack_require__.e(1944), __webpack_require__.e(1052)]).then(__webpack_require__.bind(__webpack_require__, './src/pages/ProfilePage/ui/ProfilePage.tsx'))); case 1: case 'end': return _context.stop(); } }), _callee); })))); function ArticlesPage_lazy_typeof(o) { return ArticlesPage_lazy_typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, ArticlesPage_lazy_typeof(o); } function ArticlesPage_lazy_regeneratorRuntime() {
      ArticlesPage_lazy_regeneratorRuntime = function _regeneratorRuntime() { return e; }; let t; var e = {}; const r = Object.prototype; const n = r.hasOwnProperty; const o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }; const i = typeof Symbol === 'function' ? Symbol : {}; const a = i.iterator || '@@iterator'; const c = i.asyncIterator || '@@asyncIterator'; const u = i.toStringTag || '@@toStringTag'; function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r, enumerable: !0, configurable: !0, writable: !0,
        }), t[e];
      } try { define({}, ''); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { const i = e && e.prototype instanceof Generator ? e : Generator; const a = Object.create(i.prototype); const c = new Context(n || []); return o(a, '_invoke', { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: 'normal', arg: t.call(e, r) }; } catch (t) { return { type: 'throw', arg: t }; } }e.wrap = wrap; const h = 'suspendedStart'; const l = 'suspendedYield'; const f = 'executing'; const s = 'completed'; const y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} let p = {}; define(p, a, (function () { return this; })); const d = Object.getPrototypeOf; const v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); const g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ['next', 'throw', 'return'].forEach(((e) => { define(t, e, (function (t) { return this._invoke(e, t); })); })); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { const c = tryCatch(t[r], t, o); if (c.type !== 'throw') { const u = c.arg; const h = u.value; return h && ArticlesPage_lazy_typeof(h) == 'object' && n.call(h, '__await') ? e.resolve(h.__await).then(((t) => { invoke('next', t, i, a); }), ((t) => { invoke('throw', t, i, a); })) : e.resolve(h).then(((t) => { u.value = t, i(u); }), ((t) => { return invoke('throw', t, i, a); })); }a(c.arg); } let r; o(this, '_invoke', { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(((e, r) => { invoke(t, n, e, r); })); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { let o = h; return function (i, a) { if (o === f) throw new Error('Generator is already running'); if (o === s) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = f; const p = tryCatch(e, r, n); if (p.type === 'normal') { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; }p.type === 'throw' && (o = s, n.method = 'throw', n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { const n = r.method; const o = e.iterator[n]; if (o === t) return r.delegate = null, n === 'throw' && e.iterator.return && (r.method = 'return', r.arg = t, maybeInvokeDelegate(e, r), r.method === 'throw') || n !== 'return' && (r.method = 'throw', r.arg = new TypeError(`The iterator does not provide a '${n}' method`)), y; const i = tryCatch(o, e.iterator, r.arg); if (i.type === 'throw') return r.method = 'throw', r.arg = i.arg, r.delegate = null, y; const a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, r.method !== 'return' && (r.method = 'next', r.arg = t), r.delegate = null, y) : a : (r.method = 'throw', r.arg = new TypeError('iterator result is not an object'), r.delegate = null, y); } function pushTryEntry(t) { const e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { const e = t.completion || {}; e.type = 'normal', delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || e === '') { const r = e[a]; if (r) return r.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let o = -1; const i = function next() { for (;++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(`${ArticlesPage_lazy_typeof(e)} is not iterable`); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, 'constructor', { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, 'GeneratorFunction'), e.isGeneratorFunction = function (t) { const e = typeof t === 'function' && t.constructor; return !!e && (e === GeneratorFunction || (e.displayName || e.name) === 'GeneratorFunction'); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, 'GeneratorFunction')), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, (function () { return this; })), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); const a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(((t) => { return t.done ? t.value : a.next(); })); }, defineIteratorMethods(g), define(g, u, 'Generator'), define(g, a, (function () { return this; })), define(g, 'toString', (() => { return '[object Generator]'; })), e.keys = function (t) { const e = Object(t); const r = []; for (const n in e)r.push(n); return r.reverse(), function next() { for (;r.length;) { const t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = {
        constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (const r in this)r.charAt(0) === 't' && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; const r = this; function handle(n, o) { return a.type = 'throw', a.arg = e, r.next = n, o && (r.method = 'next', r.arg = t), !!o; } for (let o = this.tryEntries.length - 1; o >= 0; --o) { const i = this.tryEntries[o]; var a = i.completion; if (i.tryLoc === 'root') return handle('end'); if (i.tryLoc <= this.prev) { const c = n.call(i, 'catchLoc'); const u = n.call(i, 'finallyLoc'); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= e && e <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = 'next', this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && e && (this.next = e), y; }, finish: function finish(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.tryLoc === t) { const n = r.completion; if (n.type === 'throw') { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error('illegal catch attempt'); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, this.method === 'next' && (this.arg = t), y; },
      }, e;
    } function ArticlesPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var { value } = info; } catch (error) { return void reject(error); }info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw); } function ArticlesPage_lazy_asyncToGenerator(fn) { return function () { const self = this; const args = arguments; return new Promise(((resolve, reject) => { const gen = fn.apply(self, args); function _next(value) { ArticlesPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value); } function _throw(err) { ArticlesPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err); }_next(void 0); })); }; } const ArticlesPageLazy = (0, react.lazy)(ArticlesPage_lazy_asyncToGenerator(ArticlesPage_lazy_regeneratorRuntime().mark((function _callee() { return ArticlesPage_lazy_regeneratorRuntime().wrap(((_context) => { for (;;) switch (_context.prev = _context.next) { case 0: return _context.abrupt('return', Promise.all([__webpack_require__.e(8448), __webpack_require__.e(9860), __webpack_require__.e(8600), __webpack_require__.e(5472), __webpack_require__.e(2560), __webpack_require__.e(8796), __webpack_require__.e(3700)]).then(__webpack_require__.bind(__webpack_require__, './src/pages/ArticlesPage/ui/ArticlesPage.tsx'))); case 1: case 'end': return _context.stop(); } }), _callee); })))); function ArticleDetailsPage_lazy_typeof(o) { return ArticleDetailsPage_lazy_typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, ArticleDetailsPage_lazy_typeof(o); } function ArticleDetailsPage_lazy_regeneratorRuntime() {
      ArticleDetailsPage_lazy_regeneratorRuntime = function _regeneratorRuntime() { return e; }; let t; var e = {}; const r = Object.prototype; const n = r.hasOwnProperty; const o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }; const i = typeof Symbol === 'function' ? Symbol : {}; const a = i.iterator || '@@iterator'; const c = i.asyncIterator || '@@asyncIterator'; const u = i.toStringTag || '@@toStringTag'; function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r, enumerable: !0, configurable: !0, writable: !0,
        }), t[e];
      } try { define({}, ''); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { const i = e && e.prototype instanceof Generator ? e : Generator; const a = Object.create(i.prototype); const c = new Context(n || []); return o(a, '_invoke', { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: 'normal', arg: t.call(e, r) }; } catch (t) { return { type: 'throw', arg: t }; } }e.wrap = wrap; const h = 'suspendedStart'; const l = 'suspendedYield'; const f = 'executing'; const s = 'completed'; const y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} let p = {}; define(p, a, (function () { return this; })); const d = Object.getPrototypeOf; const v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); const g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ['next', 'throw', 'return'].forEach(((e) => { define(t, e, (function (t) { return this._invoke(e, t); })); })); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { const c = tryCatch(t[r], t, o); if (c.type !== 'throw') { const u = c.arg; const h = u.value; return h && ArticleDetailsPage_lazy_typeof(h) == 'object' && n.call(h, '__await') ? e.resolve(h.__await).then(((t) => { invoke('next', t, i, a); }), ((t) => { invoke('throw', t, i, a); })) : e.resolve(h).then(((t) => { u.value = t, i(u); }), ((t) => { return invoke('throw', t, i, a); })); }a(c.arg); } let r; o(this, '_invoke', { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(((e, r) => { invoke(t, n, e, r); })); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { let o = h; return function (i, a) { if (o === f) throw new Error('Generator is already running'); if (o === s) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = f; const p = tryCatch(e, r, n); if (p.type === 'normal') { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; }p.type === 'throw' && (o = s, n.method = 'throw', n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { const n = r.method; const o = e.iterator[n]; if (o === t) return r.delegate = null, n === 'throw' && e.iterator.return && (r.method = 'return', r.arg = t, maybeInvokeDelegate(e, r), r.method === 'throw') || n !== 'return' && (r.method = 'throw', r.arg = new TypeError(`The iterator does not provide a '${n}' method`)), y; const i = tryCatch(o, e.iterator, r.arg); if (i.type === 'throw') return r.method = 'throw', r.arg = i.arg, r.delegate = null, y; const a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, r.method !== 'return' && (r.method = 'next', r.arg = t), r.delegate = null, y) : a : (r.method = 'throw', r.arg = new TypeError('iterator result is not an object'), r.delegate = null, y); } function pushTryEntry(t) { const e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { const e = t.completion || {}; e.type = 'normal', delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || e === '') { const r = e[a]; if (r) return r.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let o = -1; const i = function next() { for (;++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(`${ArticleDetailsPage_lazy_typeof(e)} is not iterable`); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, 'constructor', { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, 'GeneratorFunction'), e.isGeneratorFunction = function (t) { const e = typeof t === 'function' && t.constructor; return !!e && (e === GeneratorFunction || (e.displayName || e.name) === 'GeneratorFunction'); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, 'GeneratorFunction')), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, (function () { return this; })), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); const a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(((t) => { return t.done ? t.value : a.next(); })); }, defineIteratorMethods(g), define(g, u, 'Generator'), define(g, a, (function () { return this; })), define(g, 'toString', (() => { return '[object Generator]'; })), e.keys = function (t) { const e = Object(t); const r = []; for (const n in e)r.push(n); return r.reverse(), function next() { for (;r.length;) { const t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = {
        constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (const r in this)r.charAt(0) === 't' && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; const r = this; function handle(n, o) { return a.type = 'throw', a.arg = e, r.next = n, o && (r.method = 'next', r.arg = t), !!o; } for (let o = this.tryEntries.length - 1; o >= 0; --o) { const i = this.tryEntries[o]; var a = i.completion; if (i.tryLoc === 'root') return handle('end'); if (i.tryLoc <= this.prev) { const c = n.call(i, 'catchLoc'); const u = n.call(i, 'finallyLoc'); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= e && e <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = 'next', this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && e && (this.next = e), y; }, finish: function finish(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.tryLoc === t) { const n = r.completion; if (n.type === 'throw') { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error('illegal catch attempt'); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, this.method === 'next' && (this.arg = t), y; },
      }, e;
    } function ArticleDetailsPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var { value } = info; } catch (error) { return void reject(error); }info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw); } function ArticleDetailsPage_lazy_asyncToGenerator(fn) { return function () { const self = this; const args = arguments; return new Promise(((resolve, reject) => { const gen = fn.apply(self, args); function _next(value) { ArticleDetailsPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value); } function _throw(err) { ArticleDetailsPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err); }_next(void 0); })); }; } const ArticlesDetailsPageLazy = (0, react.lazy)(ArticleDetailsPage_lazy_asyncToGenerator(ArticleDetailsPage_lazy_regeneratorRuntime().mark((function _callee() { return ArticleDetailsPage_lazy_regeneratorRuntime().wrap(((_context) => { for (;;) switch (_context.prev = _context.next) { case 0: return _context.abrupt('return', Promise.all([__webpack_require__.e(8448), __webpack_require__.e(5392), __webpack_require__.e(9860), __webpack_require__.e(4244), __webpack_require__.e(8600), __webpack_require__.e(5472), __webpack_require__.e(2560), __webpack_require__.e(8796), __webpack_require__.e(2040)]).then(__webpack_require__.bind(__webpack_require__, './src/pages/ArticleDetailsPage/ui/ArticleDetailsPage/ArticleDetailsPage.tsx'))); case 1: case 'end': return _context.stop(); } }), _callee); })))); function ArticleEditPage_lazy_typeof(o) { return ArticleEditPage_lazy_typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, ArticleEditPage_lazy_typeof(o); } function ArticleEditPage_lazy_regeneratorRuntime() {
      ArticleEditPage_lazy_regeneratorRuntime = function _regeneratorRuntime() { return e; }; let t; var e = {}; const r = Object.prototype; const n = r.hasOwnProperty; const o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }; const i = typeof Symbol === 'function' ? Symbol : {}; const a = i.iterator || '@@iterator'; const c = i.asyncIterator || '@@asyncIterator'; const u = i.toStringTag || '@@toStringTag'; function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r, enumerable: !0, configurable: !0, writable: !0,
        }), t[e];
      } try { define({}, ''); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { const i = e && e.prototype instanceof Generator ? e : Generator; const a = Object.create(i.prototype); const c = new Context(n || []); return o(a, '_invoke', { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: 'normal', arg: t.call(e, r) }; } catch (t) { return { type: 'throw', arg: t }; } }e.wrap = wrap; const h = 'suspendedStart'; const l = 'suspendedYield'; const f = 'executing'; const s = 'completed'; const y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} let p = {}; define(p, a, (function () { return this; })); const d = Object.getPrototypeOf; const v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); const g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ['next', 'throw', 'return'].forEach(((e) => { define(t, e, (function (t) { return this._invoke(e, t); })); })); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { const c = tryCatch(t[r], t, o); if (c.type !== 'throw') { const u = c.arg; const h = u.value; return h && ArticleEditPage_lazy_typeof(h) == 'object' && n.call(h, '__await') ? e.resolve(h.__await).then(((t) => { invoke('next', t, i, a); }), ((t) => { invoke('throw', t, i, a); })) : e.resolve(h).then(((t) => { u.value = t, i(u); }), ((t) => { return invoke('throw', t, i, a); })); }a(c.arg); } let r; o(this, '_invoke', { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(((e, r) => { invoke(t, n, e, r); })); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { let o = h; return function (i, a) { if (o === f) throw new Error('Generator is already running'); if (o === s) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = f; const p = tryCatch(e, r, n); if (p.type === 'normal') { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; }p.type === 'throw' && (o = s, n.method = 'throw', n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { const n = r.method; const o = e.iterator[n]; if (o === t) return r.delegate = null, n === 'throw' && e.iterator.return && (r.method = 'return', r.arg = t, maybeInvokeDelegate(e, r), r.method === 'throw') || n !== 'return' && (r.method = 'throw', r.arg = new TypeError(`The iterator does not provide a '${n}' method`)), y; const i = tryCatch(o, e.iterator, r.arg); if (i.type === 'throw') return r.method = 'throw', r.arg = i.arg, r.delegate = null, y; const a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, r.method !== 'return' && (r.method = 'next', r.arg = t), r.delegate = null, y) : a : (r.method = 'throw', r.arg = new TypeError('iterator result is not an object'), r.delegate = null, y); } function pushTryEntry(t) { const e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { const e = t.completion || {}; e.type = 'normal', delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || e === '') { const r = e[a]; if (r) return r.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let o = -1; const i = function next() { for (;++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(`${ArticleEditPage_lazy_typeof(e)} is not iterable`); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, 'constructor', { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, 'GeneratorFunction'), e.isGeneratorFunction = function (t) { const e = typeof t === 'function' && t.constructor; return !!e && (e === GeneratorFunction || (e.displayName || e.name) === 'GeneratorFunction'); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, 'GeneratorFunction')), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, (function () { return this; })), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); const a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(((t) => { return t.done ? t.value : a.next(); })); }, defineIteratorMethods(g), define(g, u, 'Generator'), define(g, a, (function () { return this; })), define(g, 'toString', (() => { return '[object Generator]'; })), e.keys = function (t) { const e = Object(t); const r = []; for (const n in e)r.push(n); return r.reverse(), function next() { for (;r.length;) { const t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = {
        constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (const r in this)r.charAt(0) === 't' && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; const r = this; function handle(n, o) { return a.type = 'throw', a.arg = e, r.next = n, o && (r.method = 'next', r.arg = t), !!o; } for (let o = this.tryEntries.length - 1; o >= 0; --o) { const i = this.tryEntries[o]; var a = i.completion; if (i.tryLoc === 'root') return handle('end'); if (i.tryLoc <= this.prev) { const c = n.call(i, 'catchLoc'); const u = n.call(i, 'finallyLoc'); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= e && e <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = 'next', this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && e && (this.next = e), y; }, finish: function finish(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.tryLoc === t) { const n = r.completion; if (n.type === 'throw') { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error('illegal catch attempt'); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, this.method === 'next' && (this.arg = t), y; },
      }, e;
    } function ArticleEditPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var { value } = info; } catch (error) { return void reject(error); }info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw); } function ArticleEditPage_lazy_asyncToGenerator(fn) { return function () { const self = this; const args = arguments; return new Promise(((resolve, reject) => { const gen = fn.apply(self, args); function _next(value) { ArticleEditPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value); } function _throw(err) { ArticleEditPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err); }_next(void 0); })); }; } const ArticleEditPageLazy = (0, react.lazy)(ArticleEditPage_lazy_asyncToGenerator(ArticleEditPage_lazy_regeneratorRuntime().mark((function _callee() { return ArticleEditPage_lazy_regeneratorRuntime().wrap(((_context) => { for (;;) switch (_context.prev = _context.next) { case 0: return _context.abrupt('return', Promise.all([__webpack_require__.e(8448), __webpack_require__.e(4060)]).then(__webpack_require__.bind(__webpack_require__, './src/pages/ArticleEditPage/ui/ArticleEditPage.tsx'))); case 1: case 'end': return _context.stop(); } }), _callee); })))); function AdminPanelPage_lazy_typeof(o) { return AdminPanelPage_lazy_typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, AdminPanelPage_lazy_typeof(o); } function AdminPanelPage_lazy_regeneratorRuntime() {
      AdminPanelPage_lazy_regeneratorRuntime = function _regeneratorRuntime() { return e; }; let t; var e = {}; const r = Object.prototype; const n = r.hasOwnProperty; const o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }; const i = typeof Symbol === 'function' ? Symbol : {}; const a = i.iterator || '@@iterator'; const c = i.asyncIterator || '@@asyncIterator'; const u = i.toStringTag || '@@toStringTag'; function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r, enumerable: !0, configurable: !0, writable: !0,
        }), t[e];
      } try { define({}, ''); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { const i = e && e.prototype instanceof Generator ? e : Generator; const a = Object.create(i.prototype); const c = new Context(n || []); return o(a, '_invoke', { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: 'normal', arg: t.call(e, r) }; } catch (t) { return { type: 'throw', arg: t }; } }e.wrap = wrap; const h = 'suspendedStart'; const l = 'suspendedYield'; const f = 'executing'; const s = 'completed'; const y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} let p = {}; define(p, a, (function () { return this; })); const d = Object.getPrototypeOf; const v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); const g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ['next', 'throw', 'return'].forEach(((e) => { define(t, e, (function (t) { return this._invoke(e, t); })); })); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { const c = tryCatch(t[r], t, o); if (c.type !== 'throw') { const u = c.arg; const h = u.value; return h && AdminPanelPage_lazy_typeof(h) == 'object' && n.call(h, '__await') ? e.resolve(h.__await).then(((t) => { invoke('next', t, i, a); }), ((t) => { invoke('throw', t, i, a); })) : e.resolve(h).then(((t) => { u.value = t, i(u); }), ((t) => { return invoke('throw', t, i, a); })); }a(c.arg); } let r; o(this, '_invoke', { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(((e, r) => { invoke(t, n, e, r); })); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { let o = h; return function (i, a) { if (o === f) throw new Error('Generator is already running'); if (o === s) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = f; const p = tryCatch(e, r, n); if (p.type === 'normal') { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; }p.type === 'throw' && (o = s, n.method = 'throw', n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { const n = r.method; const o = e.iterator[n]; if (o === t) return r.delegate = null, n === 'throw' && e.iterator.return && (r.method = 'return', r.arg = t, maybeInvokeDelegate(e, r), r.method === 'throw') || n !== 'return' && (r.method = 'throw', r.arg = new TypeError(`The iterator does not provide a '${n}' method`)), y; const i = tryCatch(o, e.iterator, r.arg); if (i.type === 'throw') return r.method = 'throw', r.arg = i.arg, r.delegate = null, y; const a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, r.method !== 'return' && (r.method = 'next', r.arg = t), r.delegate = null, y) : a : (r.method = 'throw', r.arg = new TypeError('iterator result is not an object'), r.delegate = null, y); } function pushTryEntry(t) { const e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { const e = t.completion || {}; e.type = 'normal', delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || e === '') { const r = e[a]; if (r) return r.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let o = -1; const i = function next() { for (;++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(`${AdminPanelPage_lazy_typeof(e)} is not iterable`); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, 'constructor', { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, 'GeneratorFunction'), e.isGeneratorFunction = function (t) { const e = typeof t === 'function' && t.constructor; return !!e && (e === GeneratorFunction || (e.displayName || e.name) === 'GeneratorFunction'); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, 'GeneratorFunction')), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, (function () { return this; })), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); const a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(((t) => { return t.done ? t.value : a.next(); })); }, defineIteratorMethods(g), define(g, u, 'Generator'), define(g, a, (function () { return this; })), define(g, 'toString', (() => { return '[object Generator]'; })), e.keys = function (t) { const e = Object(t); const r = []; for (const n in e)r.push(n); return r.reverse(), function next() { for (;r.length;) { const t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = {
        constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (const r in this)r.charAt(0) === 't' && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; const r = this; function handle(n, o) { return a.type = 'throw', a.arg = e, r.next = n, o && (r.method = 'next', r.arg = t), !!o; } for (let o = this.tryEntries.length - 1; o >= 0; --o) { const i = this.tryEntries[o]; var a = i.completion; if (i.tryLoc === 'root') return handle('end'); if (i.tryLoc <= this.prev) { const c = n.call(i, 'catchLoc'); const u = n.call(i, 'finallyLoc'); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= e && e <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = 'next', this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && e && (this.next = e), y; }, finish: function finish(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.tryLoc === t) { const n = r.completion; if (n.type === 'throw') { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error('illegal catch attempt'); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, this.method === 'next' && (this.arg = t), y; },
      }, e;
    } function AdminPanelPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var { value } = info; } catch (error) { return void reject(error); }info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw); } function AdminPanelPage_lazy_asyncToGenerator(fn) { return function () { const self = this; const args = arguments; return new Promise(((resolve, reject) => { const gen = fn.apply(self, args); function _next(value) { AdminPanelPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value); } function _throw(err) { AdminPanelPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err); }_next(void 0); })); }; } const AdminPanelPageLazy = (0, react.lazy)(AdminPanelPage_lazy_asyncToGenerator(AdminPanelPage_lazy_regeneratorRuntime().mark((function _callee() { return AdminPanelPage_lazy_regeneratorRuntime().wrap(((_context) => { for (;;) switch (_context.prev = _context.next) { case 0: return _context.abrupt('return', Promise.all([__webpack_require__.e(8448), __webpack_require__.e(5036)]).then(__webpack_require__.bind(__webpack_require__, './src/pages/AdminPanelPage/ui/AdminPanelPage/AdminPanelPage.tsx'))); case 1: case 'end': return _context.stop(); } }), _callee); })))); const User = __webpack_require__('./src/entities/User/index.ts'); function ForbiddenPage_lazy_typeof(o) { return ForbiddenPage_lazy_typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, ForbiddenPage_lazy_typeof(o); } function ForbiddenPage_lazy_regeneratorRuntime() {
      ForbiddenPage_lazy_regeneratorRuntime = function _regeneratorRuntime() { return e; }; let t; var e = {}; const r = Object.prototype; const n = r.hasOwnProperty; const o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }; const i = typeof Symbol === 'function' ? Symbol : {}; const a = i.iterator || '@@iterator'; const c = i.asyncIterator || '@@asyncIterator'; const u = i.toStringTag || '@@toStringTag'; function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r, enumerable: !0, configurable: !0, writable: !0,
        }), t[e];
      } try { define({}, ''); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { const i = e && e.prototype instanceof Generator ? e : Generator; const a = Object.create(i.prototype); const c = new Context(n || []); return o(a, '_invoke', { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: 'normal', arg: t.call(e, r) }; } catch (t) { return { type: 'throw', arg: t }; } }e.wrap = wrap; const h = 'suspendedStart'; const l = 'suspendedYield'; const f = 'executing'; const s = 'completed'; const y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} let p = {}; define(p, a, (function () { return this; })); const d = Object.getPrototypeOf; const v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); const g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ['next', 'throw', 'return'].forEach(((e) => { define(t, e, (function (t) { return this._invoke(e, t); })); })); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { const c = tryCatch(t[r], t, o); if (c.type !== 'throw') { const u = c.arg; const h = u.value; return h && ForbiddenPage_lazy_typeof(h) == 'object' && n.call(h, '__await') ? e.resolve(h.__await).then(((t) => { invoke('next', t, i, a); }), ((t) => { invoke('throw', t, i, a); })) : e.resolve(h).then(((t) => { u.value = t, i(u); }), ((t) => { return invoke('throw', t, i, a); })); }a(c.arg); } let r; o(this, '_invoke', { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(((e, r) => { invoke(t, n, e, r); })); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { let o = h; return function (i, a) { if (o === f) throw new Error('Generator is already running'); if (o === s) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = f; const p = tryCatch(e, r, n); if (p.type === 'normal') { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; }p.type === 'throw' && (o = s, n.method = 'throw', n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { const n = r.method; const o = e.iterator[n]; if (o === t) return r.delegate = null, n === 'throw' && e.iterator.return && (r.method = 'return', r.arg = t, maybeInvokeDelegate(e, r), r.method === 'throw') || n !== 'return' && (r.method = 'throw', r.arg = new TypeError(`The iterator does not provide a '${n}' method`)), y; const i = tryCatch(o, e.iterator, r.arg); if (i.type === 'throw') return r.method = 'throw', r.arg = i.arg, r.delegate = null, y; const a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, r.method !== 'return' && (r.method = 'next', r.arg = t), r.delegate = null, y) : a : (r.method = 'throw', r.arg = new TypeError('iterator result is not an object'), r.delegate = null, y); } function pushTryEntry(t) { const e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { const e = t.completion || {}; e.type = 'normal', delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || e === '') { const r = e[a]; if (r) return r.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let o = -1; const i = function next() { for (;++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(`${ForbiddenPage_lazy_typeof(e)} is not iterable`); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, 'constructor', { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, 'GeneratorFunction'), e.isGeneratorFunction = function (t) { const e = typeof t === 'function' && t.constructor; return !!e && (e === GeneratorFunction || (e.displayName || e.name) === 'GeneratorFunction'); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, 'GeneratorFunction')), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, (function () { return this; })), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); const a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(((t) => { return t.done ? t.value : a.next(); })); }, defineIteratorMethods(g), define(g, u, 'Generator'), define(g, a, (function () { return this; })), define(g, 'toString', (() => { return '[object Generator]'; })), e.keys = function (t) { const e = Object(t); const r = []; for (const n in e)r.push(n); return r.reverse(), function next() { for (;r.length;) { const t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = {
        constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (const r in this)r.charAt(0) === 't' && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; const r = this; function handle(n, o) { return a.type = 'throw', a.arg = e, r.next = n, o && (r.method = 'next', r.arg = t), !!o; } for (let o = this.tryEntries.length - 1; o >= 0; --o) { const i = this.tryEntries[o]; var a = i.completion; if (i.tryLoc === 'root') return handle('end'); if (i.tryLoc <= this.prev) { const c = n.call(i, 'catchLoc'); const u = n.call(i, 'finallyLoc'); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= e && e <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = 'next', this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && e && (this.next = e), y; }, finish: function finish(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.tryLoc === t) { const n = r.completion; if (n.type === 'throw') { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error('illegal catch attempt'); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, this.method === 'next' && (this.arg = t), y; },
      }, e;
    } function ForbiddenPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var { value } = info; } catch (error) { return void reject(error); }info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw); } function ForbiddenPage_lazy_asyncToGenerator(fn) { return function () { const self = this; const args = arguments; return new Promise(((resolve, reject) => { const gen = fn.apply(self, args); function _next(value) { ForbiddenPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value); } function _throw(err) { ForbiddenPage_lazy_asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err); }_next(void 0); })); }; } const ForbiddenPageLazy = (0, react.lazy)(ForbiddenPage_lazy_asyncToGenerator(ForbiddenPage_lazy_regeneratorRuntime().mark((function _callee() { return ForbiddenPage_lazy_regeneratorRuntime().wrap(((_context) => { for (;;) switch (_context.prev = _context.next) { case 0: return _context.abrupt('return', Promise.all([__webpack_require__.e(8448), __webpack_require__.e(4904)]).then(__webpack_require__.bind(__webpack_require__, './src/pages/ForbiddenPage/ui/ForbiddenPage.tsx'))); case 1: case 'end': return _context.stop(); } }), _callee); })))); const jsx_runtime = __webpack_require__('./node_modules/react/jsx-runtime.js'); function routeConfig_typeof(o) { return routeConfig_typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, routeConfig_typeof(o); } function _defineProperty(obj, key, value) {
      return (key = (function _toPropertyKey(t) { const i = (function _toPrimitive(t, r) { if (routeConfig_typeof(t) != 'object' || !t) return t; const e = t[Symbol.toPrimitive]; if (void 0 !== e) { const i = e.call(t, r || 'default'); if (routeConfig_typeof(i) != 'object') return i; throw new TypeError('@@toPrimitive must return a primitive value.'); } return (r === 'string' ? String : Number)(t); }(t, 'string')); return routeConfig_typeof(i) == 'symbol' ? i : String(i); }(key))) in obj ? Object.defineProperty(obj, key, {
        value, enumerable: !0, configurable: !0, writable: !0,
      }) : obj[key] = value, obj;
    } const AppRoutes = (function (AppRoutes) { return AppRoutes.MAIN = 'main', AppRoutes.ABOUT = 'about', AppRoutes.PROFILE = 'profile', AppRoutes.ARTICLES = 'articles', AppRoutes.ARTICLE_DETAILS = 'article_details', AppRoutes.ARTICLE_CREATE = 'article_create', AppRoutes.ARTICLE_EDIT = 'article_edit', AppRoutes.ADMIN_PANEL = 'admin_panel_page', AppRoutes.FORBIDDEN = 'forbidden', AppRoutes.NOT_FOUND = 'not_found', AppRoutes; }({})); var RoutePath = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, AppRoutes.MAIN, '/'), AppRoutes.ABOUT, '/about'), AppRoutes.PROFILE, '/profile/'), AppRoutes.ARTICLES, '/articles'), AppRoutes.ARTICLE_DETAILS, '/articles/'), AppRoutes.ARTICLE_CREATE, '/articles/create'), AppRoutes.ARTICLE_EDIT, '/articles/:id/edit'), AppRoutes.ADMIN_PANEL, '/admin'), AppRoutes.FORBIDDEN, '/forbidden'), AppRoutes.NOT_FOUND, '*'); _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, AppRoutes.MAIN, { path: RoutePath.main, element: (0, jsx_runtime.jsx)(MainPageLazy, {}) }), AppRoutes.ABOUT, { path: RoutePath.about, element: (0, jsx_runtime.jsx)(AboutPageLazy, {}) }), AppRoutes.PROFILE, { path: ''.concat(RoutePath.profile, ':id'), element: (0, jsx_runtime.jsx)(ProfilePageLazy, {}), authOnly: !0 }), AppRoutes.ARTICLES, { path: RoutePath.articles, element: (0, jsx_runtime.jsx)(ArticlesPageLazy, {}), authOnly: !0 }), AppRoutes.ARTICLE_DETAILS, { path: ''.concat(RoutePath.article_details, ':id'), element: (0, jsx_runtime.jsx)(ArticlesDetailsPageLazy, {}), authOnly: !0 }), AppRoutes.ARTICLE_CREATE, { path: ''.concat(RoutePath.article_create), element: (0, jsx_runtime.jsx)(ArticleEditPageLazy, {}), authOnly: !0 }), AppRoutes.ARTICLE_EDIT, { path: ''.concat(RoutePath.article_edit), element: (0, jsx_runtime.jsx)(ArticleEditPageLazy, {}), authOnly: !0 }), AppRoutes.ADMIN_PANEL, {
      path: ''.concat(RoutePath.admin_panel_page), element: (0, jsx_runtime.jsx)(AdminPanelPageLazy, {}), authOnly: !0, role: [User.Q5.ADMIN, User.Q5.MANAGER],
    }), AppRoutes.FORBIDDEN, { path: ''.concat(RoutePath.forbidden), element: (0, jsx_runtime.jsx)(ForbiddenPageLazy, {}) }), AppRoutes.NOT_FOUND, { path: RoutePath.not_found, element: (0, jsx_runtime.jsx)(NotFound.E, {}) });
  },
  './src/shared/ui/AppLink/AppLink.tsx': (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    __webpack_require__.d(__webpack_exports__, { q: () => AppLink, A: () => AppLinkTheme }); const classNames = __webpack_require__('./src/shared/lib/classNames/classNames.ts'); const dist = __webpack_require__('./node_modules/react-router-dom/dist/index.js'); const react = __webpack_require__('./node_modules/react/index.js'); const injectStylesIntoStyleTag = __webpack_require__('./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js'); const injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag); const styleDomAPI = __webpack_require__('./node_modules/style-loader/dist/runtime/styleDomAPI.js'); const styleDomAPI_default = __webpack_require__.n(styleDomAPI); const insertBySelector = __webpack_require__('./node_modules/style-loader/dist/runtime/insertBySelector.js'); const insertBySelector_default = __webpack_require__.n(insertBySelector); const setAttributesWithoutAttributes = __webpack_require__('./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js'); const setAttributesWithoutAttributes_default = __webpack_require__.n(setAttributesWithoutAttributes); const insertStyleElement = __webpack_require__('./node_modules/style-loader/dist/runtime/insertStyleElement.js'); const insertStyleElement_default = __webpack_require__.n(insertStyleElement); const styleTagTransform = __webpack_require__('./node_modules/style-loader/dist/runtime/styleTagTransform.js'); const styleTagTransform_default = __webpack_require__.n(styleTagTransform); const AppLink_module = __webpack_require__('./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[13].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/shared/ui/AppLink/AppLink.module.scss'); const options = {}; options.styleTagTransform = styleTagTransform_default(), options.setAttributes = setAttributesWithoutAttributes_default(), options.insert = insertBySelector_default().bind(null, 'head'), options.domAPI = styleDomAPI_default(), options.insertStyleElement = insertStyleElement_default(); injectStylesIntoStyleTag_default()(AppLink_module.c, options); const AppLink_AppLink_module = AppLink_module.c && AppLink_module.c.locals ? AppLink_module.c.locals : void 0; const jsx_runtime = __webpack_require__('./node_modules/react/jsx-runtime.js'); function _typeof(o) { return _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, _typeof(o); } const _excluded = ['to', 'className', 'children', 'theme']; function ownKeys(e, r) { const t = Object.keys(e); if (Object.getOwnPropertySymbols) { let o = Object.getOwnPropertySymbols(e); r && (o = o.filter(((r) => { return Object.getOwnPropertyDescriptor(e, r).enumerable; }))), t.push.apply(t, o); } return t; } function _objectSpread(e) { for (let r = 1; r < arguments.length; r++) { var t = arguments[r] != null ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(((r) => { _defineProperty(e, r, t[r]); })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(((r) => { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); })); } return e; } function _defineProperty(obj, key, value) {
      return (key = (function _toPropertyKey(t) { const i = (function _toPrimitive(t, r) { if (_typeof(t) != 'object' || !t) return t; const e = t[Symbol.toPrimitive]; if (void 0 !== e) { const i = e.call(t, r || 'default'); if (_typeof(i) != 'object') return i; throw new TypeError('@@toPrimitive must return a primitive value.'); } return (r === 'string' ? String : Number)(t); }(t, 'string')); return _typeof(i) == 'symbol' ? i : String(i); }(key))) in obj ? Object.defineProperty(obj, key, {
        value, enumerable: !0, configurable: !0, writable: !0,
      }) : obj[key] = value, obj;
    } function _objectWithoutProperties(source, excluded) { if (source == null) return {}; let key; let i; const target = (function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; let key; let i; const target = {}; const sourceKeys = Object.keys(source); for (i = 0; i < sourceKeys.length; i++)key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]); return target; }(source, excluded)); if (Object.getOwnPropertySymbols) { const sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++)key = sourceSymbolKeys[i], excluded.indexOf(key) >= 0 || Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]); } return target; } var AppLinkTheme = (function (AppLinkTheme) { return AppLinkTheme.PRIMARY = 'primary', AppLinkTheme.SECONDARY = 'secondary', AppLinkTheme; }({})); var AppLink = (0, react.memo)(((props) => {
      const { to } = props; const { className } = props; const { children } = props; const _props$theme = props.theme; const theme = void 0 === _props$theme ? AppLinkTheme.PRIMARY : _props$theme; const
        otherProps = _objectWithoutProperties(props, _excluded); return (0, jsx_runtime.jsx)(dist.cH, _objectSpread(_objectSpread({ to, className: (0, classNames.g)(AppLink_AppLink_module.AppLink, _defineProperty({}, AppLink_AppLink_module[theme], !0), [className]) }, otherProps), {}, { children }));
    }));
  },
  './node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[13].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/pages/NotFoundPage/ui/NotFound.module.scss': (module, __webpack_exports__, __webpack_require__) => {
    __webpack_require__.d(__webpack_exports__, { c: () => __WEBPACK_DEFAULT_EXPORT__ }); const _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__('./node_modules/css-loader/dist/runtime/sourceMaps.js'); const _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__); const _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__('./node_modules/css-loader/dist/runtime/api.js'); const ___CSS_LOADER_EXPORT___ = __webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()); ___CSS_LOADER_EXPORT___.push([module.id, '.src-pages-NotFoundPage-ui-NotFound-module__NotFound--qpMjS{font:var(--font-l);display:flex;justify-content:center;align-items:center}', '', {
      version: 3, sources: ['webpack://./src/pages/NotFoundPage/ui/NotFound.module.scss'], names: [], mappings: 'AAAA,4DACE,kBAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA', sourcesContent: ['.NotFound {\n  font: var(--font-l);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n'], sourceRoot: '',
    }]), ___CSS_LOADER_EXPORT___.locals = { NotFound: 'src-pages-NotFoundPage-ui-NotFound-module__NotFound--qpMjS' }; const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
  },
  './node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[13].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/shared/ui/AppLink/AppLink.module.scss': (module, __webpack_exports__, __webpack_require__) => {
    __webpack_require__.d(__webpack_exports__, { c: () => __WEBPACK_DEFAULT_EXPORT__ }); const _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__('./node_modules/css-loader/dist/runtime/sourceMaps.js'); const _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__); const _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__('./node_modules/css-loader/dist/runtime/api.js'); const ___CSS_LOADER_EXPORT___ = __webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()); ___CSS_LOADER_EXPORT___.push([module.id, '.src-shared-ui-AppLink-AppLink-module__AppLink--mVYHW{color:var(--inverted-secondary-color);text-decoration:none}.src-shared-ui-AppLink-AppLink-module__primary--lPwbq{color:var(--inverted-secondary-color)}.src-shared-ui-AppLink-AppLink-module__secondary--E8eho{color:var(--inverted-primary-color)}', '', {
      version: 3, sources: ['webpack://./src/shared/ui/AppLink/AppLink.module.scss'], names: [], mappings: 'AAAA,sDACE,qCAAA,CACA,oBAAA,CAGF,sDACE,qCAAA,CAGF,wDACE,mCAAA', sourcesContent: ['.AppLink {\n  color: var(--inverted-secondary-color);\n  text-decoration: none;\n}\n\n.primary {\n  color: var(--inverted-secondary-color);\n}\n\n.secondary {\n  color: var(--inverted-primary-color);\n}\n'], sourceRoot: '',
    }]), ___CSS_LOADER_EXPORT___.locals = { AppLink: 'src-shared-ui-AppLink-AppLink-module__AppLink--mVYHW', primary: 'src-shared-ui-AppLink-AppLink-module__primary--lPwbq', secondary: 'src-shared-ui-AppLink-AppLink-module__secondary--E8eho' }; const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
  },
}]);
