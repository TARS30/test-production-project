/*! For license information please see 4244.407f575b.iframe.bundle.js.LICENSE.txt */

(self.webpackChunkproduction_project_code_course = self.webpackChunkproduction_project_code_course || []).push([[4244], {
  './src/entities/Article/model/services/fetchArticleById/fetchArticleById.ts': (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    function _typeof(o) { return _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, _typeof(o); } function _regeneratorRuntime() {
      _regeneratorRuntime = function _regeneratorRuntime() { return e; }; let t; var e = {}; const r = Object.prototype; const n = r.hasOwnProperty; const o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }; const i = typeof Symbol === 'function' ? Symbol : {}; const a = i.iterator || '@@iterator'; const c = i.asyncIterator || '@@asyncIterator'; const u = i.toStringTag || '@@toStringTag'; function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r, enumerable: !0, configurable: !0, writable: !0,
        }), t[e];
      } try { define({}, ''); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { const i = e && e.prototype instanceof Generator ? e : Generator; const a = Object.create(i.prototype); const c = new Context(n || []); return o(a, '_invoke', { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: 'normal', arg: t.call(e, r) }; } catch (t) { return { type: 'throw', arg: t }; } }e.wrap = wrap; const h = 'suspendedStart'; const l = 'suspendedYield'; const f = 'executing'; const s = 'completed'; const y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} let p = {}; define(p, a, (function () { return this; })); const d = Object.getPrototypeOf; const v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); const g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ['next', 'throw', 'return'].forEach(((e) => { define(t, e, (function (t) { return this._invoke(e, t); })); })); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { const c = tryCatch(t[r], t, o); if (c.type !== 'throw') { const u = c.arg; const h = u.value; return h && _typeof(h) == 'object' && n.call(h, '__await') ? e.resolve(h.__await).then(((t) => { invoke('next', t, i, a); }), ((t) => { invoke('throw', t, i, a); })) : e.resolve(h).then(((t) => { u.value = t, i(u); }), ((t) => { return invoke('throw', t, i, a); })); }a(c.arg); } let r; o(this, '_invoke', { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(((e, r) => { invoke(t, n, e, r); })); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { let o = h; return function (i, a) { if (o === f) throw new Error('Generator is already running'); if (o === s) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = f; const p = tryCatch(e, r, n); if (p.type === 'normal') { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; }p.type === 'throw' && (o = s, n.method = 'throw', n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { const n = r.method; const o = e.iterator[n]; if (o === t) return r.delegate = null, n === 'throw' && e.iterator.return && (r.method = 'return', r.arg = t, maybeInvokeDelegate(e, r), r.method === 'throw') || n !== 'return' && (r.method = 'throw', r.arg = new TypeError(`The iterator does not provide a '${n}' method`)), y; const i = tryCatch(o, e.iterator, r.arg); if (i.type === 'throw') return r.method = 'throw', r.arg = i.arg, r.delegate = null, y; const a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, r.method !== 'return' && (r.method = 'next', r.arg = t), r.delegate = null, y) : a : (r.method = 'throw', r.arg = new TypeError('iterator result is not an object'), r.delegate = null, y); } function pushTryEntry(t) { const e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { const e = t.completion || {}; e.type = 'normal', delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || e === '') { const r = e[a]; if (r) return r.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let o = -1; const i = function next() { for (;++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(`${_typeof(e)} is not iterable`); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, 'constructor', { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, 'GeneratorFunction'), e.isGeneratorFunction = function (t) { const e = typeof t === 'function' && t.constructor; return !!e && (e === GeneratorFunction || (e.displayName || e.name) === 'GeneratorFunction'); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, 'GeneratorFunction')), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, (function () { return this; })), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); const a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(((t) => { return t.done ? t.value : a.next(); })); }, defineIteratorMethods(g), define(g, u, 'Generator'), define(g, a, (function () { return this; })), define(g, 'toString', (() => { return '[object Generator]'; })), e.keys = function (t) { const e = Object(t); const r = []; for (const n in e)r.push(n); return r.reverse(), function next() { for (;r.length;) { const t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = {
        constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (const r in this)r.charAt(0) === 't' && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; const r = this; function handle(n, o) { return a.type = 'throw', a.arg = e, r.next = n, o && (r.method = 'next', r.arg = t), !!o; } for (let o = this.tryEntries.length - 1; o >= 0; --o) { const i = this.tryEntries[o]; var a = i.completion; if (i.tryLoc === 'root') return handle('end'); if (i.tryLoc <= this.prev) { const c = n.call(i, 'catchLoc'); const u = n.call(i, 'finallyLoc'); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= e && e <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = 'next', this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && e && (this.next = e), y; }, finish: function finish(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.tryLoc === t) { const n = r.completion; if (n.type === 'throw') { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error('illegal catch attempt'); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, this.method === 'next' && (this.arg = t), y; },
      }, e;
    } function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var { value } = info; } catch (error) { return void reject(error); }info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw); }__webpack_require__.d(__webpack_exports__, { G: () => fetchArticleById }); var fetchArticleById = (0, __webpack_require__('./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js').aw)('articleDetails/fetchArticleById', (function () { const _ref = (function _asyncToGenerator(fn) { return function () { const self = this; const args = arguments; return new Promise(((resolve, reject) => { const gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err); }_next(void 0); })); }; }(_regeneratorRuntime().mark((function _callee(articleId, thunkApi) { let extra; let rejectWithValue; let response; return _regeneratorRuntime().wrap(((_context) => { for (;;) switch (_context.prev = _context.next) { case 0: return extra = thunkApi.extra, rejectWithValue = thunkApi.rejectWithValue, _context.prev = 1, _context.next = 4, extra.api.get('/articles/'.concat(articleId), { params: { _expand: 'user' } }); case 4: if ((response = _context.sent).data) { _context.next = 7; break; } throw new Error(); case 7: if (articleId) { _context.next = 9; break; } throw new Error('no id found'); case 9: return _context.abrupt('return', response.data); case 12: return _context.prev = 12, _context.t0 = _context.catch(1), _context.abrupt('return', rejectWithValue('error')); case 15: case 'end': return _context.stop(); } }), _callee, null, [[1, 12]]); })))); return function (_x, _x2) { return _ref.apply(this, arguments); }; }()));
  },
  './src/entities/Article/model/slices/articleDetailsSlice.ts': (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    __webpack_require__.d(__webpack_exports__, { u6: () => articleDetailsReducer }); const _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__('./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js'); const _services_fetchArticleById_fetchArticleById__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__('./src/entities/Article/model/services/fetchArticleById/fetchArticleById.ts'); const initialState = { isLoading: !1, error: void 0, data: void 0 }; const articleDetailsSlice = (0, _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.is)({
      name: 'articleDetails', initialState, reducers: {}, extraReducers: function extraReducers(builder) { builder.addCase(_services_fetchArticleById_fetchArticleById__WEBPACK_IMPORTED_MODULE_0__.G.pending, ((state) => { state.error = void 0, state.isLoading = !0; })).addCase(_services_fetchArticleById_fetchArticleById__WEBPACK_IMPORTED_MODULE_0__.G.fulfilled, ((state, action) => { state.isLoading = !1, state.data = action.payload; })).addCase(_services_fetchArticleById_fetchArticleById__WEBPACK_IMPORTED_MODULE_0__.G.rejected, ((state, action) => { state.isLoading = !1, state.error = action.payload; })); },
    }); var articleDetailsReducer = (articleDetailsSlice.actions, articleDetailsSlice.reducer);
  },
  './src/pages/ArticleDetailsPage/model/services/fetchCommentsByArticleId/fetchCommentsByArticleId.ts': (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    function _typeof(o) { return _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, _typeof(o); } function _regeneratorRuntime() {
      _regeneratorRuntime = function _regeneratorRuntime() { return e; }; let t; var e = {}; const r = Object.prototype; const n = r.hasOwnProperty; const o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }; const i = typeof Symbol === 'function' ? Symbol : {}; const a = i.iterator || '@@iterator'; const c = i.asyncIterator || '@@asyncIterator'; const u = i.toStringTag || '@@toStringTag'; function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r, enumerable: !0, configurable: !0, writable: !0,
        }), t[e];
      } try { define({}, ''); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { const i = e && e.prototype instanceof Generator ? e : Generator; const a = Object.create(i.prototype); const c = new Context(n || []); return o(a, '_invoke', { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: 'normal', arg: t.call(e, r) }; } catch (t) { return { type: 'throw', arg: t }; } }e.wrap = wrap; const h = 'suspendedStart'; const l = 'suspendedYield'; const f = 'executing'; const s = 'completed'; const y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} let p = {}; define(p, a, (function () { return this; })); const d = Object.getPrototypeOf; const v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); const g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ['next', 'throw', 'return'].forEach(((e) => { define(t, e, (function (t) { return this._invoke(e, t); })); })); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { const c = tryCatch(t[r], t, o); if (c.type !== 'throw') { const u = c.arg; const h = u.value; return h && _typeof(h) == 'object' && n.call(h, '__await') ? e.resolve(h.__await).then(((t) => { invoke('next', t, i, a); }), ((t) => { invoke('throw', t, i, a); })) : e.resolve(h).then(((t) => { u.value = t, i(u); }), ((t) => { return invoke('throw', t, i, a); })); }a(c.arg); } let r; o(this, '_invoke', { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(((e, r) => { invoke(t, n, e, r); })); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { let o = h; return function (i, a) { if (o === f) throw new Error('Generator is already running'); if (o === s) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = f; const p = tryCatch(e, r, n); if (p.type === 'normal') { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; }p.type === 'throw' && (o = s, n.method = 'throw', n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { const n = r.method; const o = e.iterator[n]; if (o === t) return r.delegate = null, n === 'throw' && e.iterator.return && (r.method = 'return', r.arg = t, maybeInvokeDelegate(e, r), r.method === 'throw') || n !== 'return' && (r.method = 'throw', r.arg = new TypeError(`The iterator does not provide a '${n}' method`)), y; const i = tryCatch(o, e.iterator, r.arg); if (i.type === 'throw') return r.method = 'throw', r.arg = i.arg, r.delegate = null, y; const a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, r.method !== 'return' && (r.method = 'next', r.arg = t), r.delegate = null, y) : a : (r.method = 'throw', r.arg = new TypeError('iterator result is not an object'), r.delegate = null, y); } function pushTryEntry(t) { const e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { const e = t.completion || {}; e.type = 'normal', delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || e === '') { const r = e[a]; if (r) return r.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let o = -1; const i = function next() { for (;++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(`${_typeof(e)} is not iterable`); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, 'constructor', { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, 'GeneratorFunction'), e.isGeneratorFunction = function (t) { const e = typeof t === 'function' && t.constructor; return !!e && (e === GeneratorFunction || (e.displayName || e.name) === 'GeneratorFunction'); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, 'GeneratorFunction')), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, (function () { return this; })), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); const a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(((t) => { return t.done ? t.value : a.next(); })); }, defineIteratorMethods(g), define(g, u, 'Generator'), define(g, a, (function () { return this; })), define(g, 'toString', (() => { return '[object Generator]'; })), e.keys = function (t) { const e = Object(t); const r = []; for (const n in e)r.push(n); return r.reverse(), function next() { for (;r.length;) { const t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = {
        constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (const r in this)r.charAt(0) === 't' && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; const r = this; function handle(n, o) { return a.type = 'throw', a.arg = e, r.next = n, o && (r.method = 'next', r.arg = t), !!o; } for (let o = this.tryEntries.length - 1; o >= 0; --o) { const i = this.tryEntries[o]; var a = i.completion; if (i.tryLoc === 'root') return handle('end'); if (i.tryLoc <= this.prev) { const c = n.call(i, 'catchLoc'); const u = n.call(i, 'finallyLoc'); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= e && e <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = 'next', this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && e && (this.next = e), y; }, finish: function finish(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.tryLoc === t) { const n = r.completion; if (n.type === 'throw') { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error('illegal catch attempt'); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, this.method === 'next' && (this.arg = t), y; },
      }, e;
    } function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var { value } = info; } catch (error) { return void reject(error); }info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw); }__webpack_require__.d(__webpack_exports__, { A: () => fetchCommentsByArticleId }); var fetchCommentsByArticleId = (0, __webpack_require__('./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js').aw)('articleDetails/fetchCommentsByArticleId', (function () { const _ref = (function _asyncToGenerator(fn) { return function () { const self = this; const args = arguments; return new Promise(((resolve, reject) => { const gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err); }_next(void 0); })); }; }(_regeneratorRuntime().mark((function _callee(articleId, thunkApi) { let extra; let rejectWithValue; let response; return _regeneratorRuntime().wrap(((_context) => { for (;;) switch (_context.prev = _context.next) { case 0: if (extra = thunkApi.extra, rejectWithValue = thunkApi.rejectWithValue, articleId) { _context.next = 3; break; } return _context.abrupt('return', rejectWithValue('error')); case 3: return _context.prev = 3, _context.next = 6, extra.api.get('/comments', { params: { articleId, _expand: 'user' } }); case 6: if ((response = _context.sent).data) { _context.next = 9; break; } throw new Error(); case 9: return _context.abrupt('return', response.data); case 12: return _context.prev = 12, _context.t0 = _context.catch(3), _context.abrupt('return', rejectWithValue('error')); case 15: case 'end': return _context.stop(); } }), _callee, null, [[3, 12]]); })))); return function (_x, _x2) { return _ref.apply(this, arguments); }; }()));
  },
  './src/pages/ArticleDetailsPage/model/slices/articleDetailsCommentsSlice.ts': (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    __webpack_require__.d(__webpack_exports__, { O: () => getArticleComments, u: () => articleDetailsCommentsReducer }); const _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__('./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js'); const _services_fetchCommentsByArticleId_fetchCommentsByArticleId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__('./src/pages/ArticleDetailsPage/model/services/fetchCommentsByArticleId/fetchCommentsByArticleId.ts'); const commentsAdapter = (0, _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.cr)({ selectId: function selectId(comment) { return comment.id; } }); var getArticleComments = commentsAdapter.getSelectors(((state) => { let _state$ArticleDetails; return ((_state$ArticleDetails = state.ArticleDetailsPage) === null || void 0 === _state$ArticleDetails ? void 0 : _state$ArticleDetails.comments) || commentsAdapter.getInitialState(); })); var articleDetailsCommentsReducer = (0, _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.is)({
      name: 'articleDetailsCommentsSlice',
      initialState: commentsAdapter.getInitialState({
        isLoading: !1, error: void 0, ids: [], entities: {},
      }),
      reducers: {},
      extraReducers: function extraReducers(builder) { builder.addCase(_services_fetchCommentsByArticleId_fetchCommentsByArticleId__WEBPACK_IMPORTED_MODULE_0__.A.pending, ((state) => { state.error = void 0, state.isLoading = !0; })).addCase(_services_fetchCommentsByArticleId_fetchCommentsByArticleId__WEBPACK_IMPORTED_MODULE_0__.A.fulfilled, ((state, action) => { state.isLoading = !1, commentsAdapter.setAll(state, action.payload); })).addCase(_services_fetchCommentsByArticleId_fetchCommentsByArticleId__WEBPACK_IMPORTED_MODULE_0__.A.rejected, ((state, action) => { state.isLoading = !1, state.error = action.payload; })); },
    }).reducer;
  },
  './src/pages/ArticleDetailsPage/model/slices/index.ts': (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
    __webpack_require__.d(__webpack_exports__, { g: () => ArticleDetailsPageReducer }); const redux = __webpack_require__('./node_modules/redux/es/redux.js'); const articleDetailsCommentsSlice = __webpack_require__('./src/pages/ArticleDetailsPage/model/slices/articleDetailsCommentsSlice.ts'); const redux_toolkit_esm = __webpack_require__('./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js'); function _typeof(o) { return _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (o) { return typeof o; } : function (o) { return o && typeof Symbol === 'function' && o.constructor === Symbol && o !== Symbol.prototype ? 'symbol' : typeof o; }, _typeof(o); } function _regeneratorRuntime() {
      _regeneratorRuntime = function _regeneratorRuntime() { return e; }; let t; var e = {}; const r = Object.prototype; const n = r.hasOwnProperty; const o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }; const i = typeof Symbol === 'function' ? Symbol : {}; const a = i.iterator || '@@iterator'; const c = i.asyncIterator || '@@asyncIterator'; const u = i.toStringTag || '@@toStringTag'; function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r, enumerable: !0, configurable: !0, writable: !0,
        }), t[e];
      } try { define({}, ''); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { const i = e && e.prototype instanceof Generator ? e : Generator; const a = Object.create(i.prototype); const c = new Context(n || []); return o(a, '_invoke', { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: 'normal', arg: t.call(e, r) }; } catch (t) { return { type: 'throw', arg: t }; } }e.wrap = wrap; const h = 'suspendedStart'; const l = 'suspendedYield'; const f = 'executing'; const s = 'completed'; const y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} let p = {}; define(p, a, (function () { return this; })); const d = Object.getPrototypeOf; const v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); const g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ['next', 'throw', 'return'].forEach(((e) => { define(t, e, (function (t) { return this._invoke(e, t); })); })); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { const c = tryCatch(t[r], t, o); if (c.type !== 'throw') { const u = c.arg; const h = u.value; return h && _typeof(h) == 'object' && n.call(h, '__await') ? e.resolve(h.__await).then(((t) => { invoke('next', t, i, a); }), ((t) => { invoke('throw', t, i, a); })) : e.resolve(h).then(((t) => { u.value = t, i(u); }), ((t) => { return invoke('throw', t, i, a); })); }a(c.arg); } let r; o(this, '_invoke', { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(((e, r) => { invoke(t, n, e, r); })); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { let o = h; return function (i, a) { if (o === f) throw new Error('Generator is already running'); if (o === s) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = f; const p = tryCatch(e, r, n); if (p.type === 'normal') { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; }p.type === 'throw' && (o = s, n.method = 'throw', n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { const n = r.method; const o = e.iterator[n]; if (o === t) return r.delegate = null, n === 'throw' && e.iterator.return && (r.method = 'return', r.arg = t, maybeInvokeDelegate(e, r), r.method === 'throw') || n !== 'return' && (r.method = 'throw', r.arg = new TypeError(`The iterator does not provide a '${n}' method`)), y; const i = tryCatch(o, e.iterator, r.arg); if (i.type === 'throw') return r.method = 'throw', r.arg = i.arg, r.delegate = null, y; const a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, r.method !== 'return' && (r.method = 'next', r.arg = t), r.delegate = null, y) : a : (r.method = 'throw', r.arg = new TypeError('iterator result is not an object'), r.delegate = null, y); } function pushTryEntry(t) { const e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { const e = t.completion || {}; e.type = 'normal', delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || e === '') { const r = e[a]; if (r) return r.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let o = -1; const i = function next() { for (;++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(`${_typeof(e)} is not iterable`); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, 'constructor', { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, 'GeneratorFunction'), e.isGeneratorFunction = function (t) { const e = typeof t === 'function' && t.constructor; return !!e && (e === GeneratorFunction || (e.displayName || e.name) === 'GeneratorFunction'); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, 'GeneratorFunction')), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, (function () { return this; })), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); const a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(((t) => { return t.done ? t.value : a.next(); })); }, defineIteratorMethods(g), define(g, u, 'Generator'), define(g, a, (function () { return this; })), define(g, 'toString', (() => { return '[object Generator]'; })), e.keys = function (t) { const e = Object(t); const r = []; for (const n in e)r.push(n); return r.reverse(), function next() { for (;r.length;) { const t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = {
        constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (const r in this)r.charAt(0) === 't' && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; const r = this; function handle(n, o) { return a.type = 'throw', a.arg = e, r.next = n, o && (r.method = 'next', r.arg = t), !!o; } for (let o = this.tryEntries.length - 1; o >= 0; --o) { const i = this.tryEntries[o]; var a = i.completion; if (i.tryLoc === 'root') return handle('end'); if (i.tryLoc <= this.prev) { const c = n.call(i, 'catchLoc'); const u = n.call(i, 'finallyLoc'); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= e && e <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = 'next', this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && e && (this.next = e), y; }, finish: function finish(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const r = this.tryEntries[e]; if (r.tryLoc === t) { const n = r.completion; if (n.type === 'throw') { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error('illegal catch attempt'); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, this.method === 'next' && (this.arg = t), y; },
      }, e;
    } function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var { value } = info; } catch (error) { return void reject(error); }info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw); } const fetchArticleRecommendations = (0, redux_toolkit_esm.aw)('articleDetailsPage/fetchArticleRecommendations', (function () { const _ref = (function _asyncToGenerator(fn) { return function () { const self = this; const args = arguments; return new Promise(((resolve, reject) => { const gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err); }_next(void 0); })); }; }(_regeneratorRuntime().mark((function _callee(props, thunkApi) { let extra; let rejectWithValue; let response; return _regeneratorRuntime().wrap(((_context) => { for (;;) switch (_context.prev = _context.next) { case 0: return extra = thunkApi.extra, rejectWithValue = thunkApi.rejectWithValue, _context.prev = 1, _context.next = 4, extra.api.get('/articles', { params: { _limit: 5 } }); case 4: if ((response = _context.sent).data) { _context.next = 7; break; } throw new Error(); case 7: return _context.abrupt('return', response.data); case 10: return _context.prev = 10, _context.t0 = _context.catch(1), _context.abrupt('return', rejectWithValue('error')); case 13: case 'end': return _context.stop(); } }), _callee, null, [[1, 10]]); })))); return function (_x, _x2) { return _ref.apply(this, arguments); }; }())); const recommendationsAdapter = (0, redux_toolkit_esm.cr)({ selectId: function selectId(article) { return article.id; } }); const articlePageRecommendationsReducer = (recommendationsAdapter.getSelectors(((state) => { let _state$ArticleDetails; return ((_state$ArticleDetails = state.ArticleDetailsPage) === null || void 0 === _state$ArticleDetails ? void 0 : _state$ArticleDetails.recommendations) || recommendationsAdapter.getInitialState(); })), (0, redux_toolkit_esm.is)({
      name: 'articlePageRecommendationsSlice',
      initialState: recommendationsAdapter.getInitialState({
        isLoading: !1, error: void 0, ids: [], entities: {},
      }),
      reducers: {},
      extraReducers: function extraReducers(builder) { builder.addCase(fetchArticleRecommendations.pending, ((state) => { state.error = void 0, state.isLoading = !0; })).addCase(fetchArticleRecommendations.fulfilled, ((state, action) => { state.isLoading = !1, recommendationsAdapter.setAll(state, action.payload); })).addCase(fetchArticleRecommendations.rejected, ((state, action) => { state.isLoading = !1, state.error = action.payload; })); },
    }).reducer); var ArticleDetailsPageReducer = (0, redux.TL)({ comments: articleDetailsCommentsSlice.u, recommendations: articlePageRecommendationsReducer });
  },
  './src/shared/api/rtkApi.ts': (__unused_webpack_module, __webpack_exports__, __webpack_require__) => { __webpack_require__.d(__webpack_exports__, { W: () => rtkApi }); const _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__('./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.esm.js'); const _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__('./node_modules/@reduxjs/toolkit/dist/query/rtk-query.esm.js'); const shared_const_localStorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__('./src/shared/const/localStorage.ts'); var rtkApi = (0, _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__.KS)({ reducerPath: 'api', baseQuery: (0, _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_1__._)({ baseUrl: 'https://testapi.ru', prepareHeaders: function prepareHeaders(headers) { const token = localStorage.getItem(shared_const_localStorage__WEBPACK_IMPORTED_MODULE_2__.a2) || ''; return token && headers.set('Authorization', token), headers; } }), endpoints: function endpoints(builder) { return {}; } }); },
}]);
